---
title: "Using Geo/parquet"
author:
  - Dr. Ryan Peek
format: 
  revealjs:
    self-contained: false
    #width: 1600
    #height: 900
    logo: ../img/rabo_icon.png
    highlight-style: ayu-mirage
    code-block-border-left: "#31BAE9"
    multiplex: true
    theme: [default, rabo.scss]
    slide-number: c/t
    incremental: true
    title-slide-attributes:
      data-background-image: img/azimuth_inset_map_nfamerican.png
      data-background-size: contain
      data-background-opacity: "0.7" 
editor: source
editor_options: 
  chunk_output_type: console
---

```{r setup}
#| include: false

# viz packages
#library(patchwork)
#library(paletteer)
library(dplyr)
library(ggplot2)

library(fs) # file management
library(here) # dir default

# spatial packages
library(sf)
library(geojsonsf)
library(nhdplusTools)
library(geoarrow)
library(mapview)

# for fonts
theme_set(theme_minimal(base_family = "Atkinson Hyperlegible"))
```

# Packages

The packages we'll need: 

```{r pkgs}
#| echo: true
#| eval: false

library(dplyr) # wrangling
library(ggplot2) # viz
library(fs) # file management
library(here) # directory 

# spatial packages
library(tigris) # for census/geospatial data
library(sf) # wrangling geospatial data
library(geojsonsf)
library(nhdplusTools) # all things rivers in US
library(geoarrow)

```

# `r fontawesome::fa("laptop-code", "white")` Code Ready? {background-color="#447099" transition="slide-in"}

-   Open RStudio
-   Website: 

```https://d-rug.github.io/using-geoparquet-R```

```{r}
#| echo: false
library(countdown)
countdown_timer <- function(
    minutes = 1, 
    play_sound = TRUE, 
    font_size = "2em", 
    ...
) {
  countdown(
    minutes = minutes,
    # Fanfare when it's over
    play_sound = play_sound,
    # Set timer theme to match solarized colors
    color_border              = "#404041",
    color_text                = "white",
    color_background = "#447099",
    color_running_background  = "#72994E",
    color_running_text        = "white",
    color_finished_background = "#EE6331",
    color_finished_text       = "white",
    font_size = font_size,
    ...
  )
}
```

<br>
<br>

```{R}
#| echo: false
countdown_timer(1)
```


## What is a `.parquet` file? (and why bother!?)

::: columns
::: column
-   The `parquet` format is a file type that contains a table inside similar to a `.csv`

-   However these files are stored in binary form *not as plain text*

-   `parquet` files are column-oriented (unlike csv) and each column is stored *independently*

-   `parquet` embeds the schema or data types/structure within the data itself
:::

::: column

::: {.fragment .fade-in}
[![Columnar Data](../img/parquet-columnar.png){fig-alt="Columnar data comparison following parquets column first approach"}](https://arrow-user2022.netlify.app/)
:::

:::

:::

::: {.footer}
<https://ryanpeek.org>
:::

::: notes
pull data from Bing buildings for CA (https://github.com/microsoft/USBuildingFootprints) and get CA data: https://usbuildingdata.blob.core.windows.net/usbuildings-v2/California.geojson.zip
:::

## [geoarrow](https://paleolimbot.github.io/geoarrow/)

::: columns
::: {.column width="70%"}

-   [package that leverages `{sf}` and `arrow`]{.fragment .semi-fade-out}
-   really [fast]{.fragment .highlight-red} way to store large spatial data
-   can read or write parquet & sf files [^note]

:::

[^note]: Also see the [{`sfarrow`}](https://wcjochem.github.io/sfarrow/index.html) package

::: {.column width="30%" .fragment}
![](../img/flare_helix.png)
:::
:::

## Making space for time...

 - `parquet` files aren't just about compression (though some savings here)

 - The real benefit is speed reading/operating/writing data!

::: {.fragment} 

![](https://media.giphy.com/media/Gpu3skdN58ApO/giphy.gif){fig-align="center" width=65%}

:::

## Practice! {.r-fit-text}

## NHD Watersheds {.r-fit-text}

::: columns
::: {.column width="50%"}

- Use {`nhdplusTools`} to get HUC12s for CA [^hint]
- Save out as a `parquet` file with {`sf`} class
- Read in and make a map!

:::

::: {.column width="50%"}

![Map of healthy watersheds with zoom circle](../img/WBD_Base_HUStructure_small.png){fig-alt="Watershed Boundary Dataset nested structure"}

:::

:::

[^hint]: Try `nhdplusTools::get_huc("huc12")` with a state AOI


## {background-image="../img/yuba_watershed.png" background-color="white"}

### HUC12

## Get CA Outline and HUC12

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|5|8|9|11"

# create dir to save data
fs::dir_create("slides/data")

# get CA and download HUC12s
ca <- tigris::states(progress_bar=FALSE) %>% filter(NAME=="California")

# can specify any given option for huc8, huc10,etc
huc12 <- nhdplusTools::get_huc(ca, type = "huc12") # this takes a minute or two
huc12 <- sf::st_cast(huc12, "MULTIPOLYGON") # fix geometry
# save out
geoarrow::write_geoparquet(huc12, here::here("slides/data/nhd_huc12.parquet"))

```

## Read in and Map!


```{r}
#| eval: true
#| echo: true
h12 <- read_geoparquet_sf(here::here("slides/data/nhd_huc12.parquet"))

# plot
ggplot() + geom_sf(data=h12, color="skyblue", alpha=0.3, linewidth=0.05)

```


## {background-image="https://github.com/microsoft/USBuildingFootprints/raw/master/images/example.JPG" background-color="black" background-opacity="0.7"}

### CA Vector Buildings {.r-fit-text}

 - https://github.com/microsoft/USBuildingFootprints
 - Downloaded CA only (`geoson.zip` is 466MB, unzipped 3.6GB)
 - Includes building polygons for all of CA (**n=11,542,912**!)
 
## Read it in, Write it Out

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|2|3|4|9|15"
library(tictoc)
tic()
df <- geojsonsf::geojson_sf("~/Downloads/California.geojson") 
toc()
# 257.514 sec elapsed

# write it out
tic()
geoarrow::write_geoparquet(df, here::here("slides/data/ca_bing_buildings.parquet"))
toc()
# writes in 11.745 seconds!

# read it back in
tic()
df_parq <- geoarrow::read_geoparquet_sf(here::here("slides/data/ca_bing_buildings.parquet"))
toc()
# read in 14.724 seconds!
```



## Crop by a County {background-color="black"}

```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|4|5|6|11|12"
library(tigris)

# get building data
df_parq <- geoarrow::read_geoparquet_sf(here::here("slides/data/ca_bing_buildings.parquet"))
cnty <- counties(state="CA")
sel_cnty <- cnty %>% filter(NAME=="Butte") %>% st_transform(4326)
st_crs(df_parq)$epsg
st_crs(sel_cnty)$epsg

# crop
sf_use_s2(FALSE)
sel_df <- df_parq[sel_cnty,]

```

## Filter to Largest Buildings 

::: {.nonincremental}
 - Here we can read in, add area, and filter to buildings in the top 5% (largest area) of the county
:::
```{r}
#| echo: true
#| eval: true

sel_df <- geoarrow::read_geoparquet_sf(here::here("slides/data/ca_bing_buildings_butte.parquet"))
# turn off s2
sf_use_s2(FALSE)

# add area
sel_df <- sel_df %>% 
  mutate(build_area = st_area(geometry))

# sort by largest and select top 5% largest
sel_df_lrg <- sel_df %>% 
  arrange(build_area) %>% 
  slice_max(order_by = build_area, prop = 0.05)

```

## Map!

```{r}
#| echo: false
#| eval: true
#| fig-cap: "Buildings in the top 5% for area in the county"

mapview::mapview(sel_df_lrg, layer.name="Largest Buildings")
```

